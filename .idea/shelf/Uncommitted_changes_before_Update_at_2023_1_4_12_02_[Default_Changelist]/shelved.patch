Index: emips/gui/main_gui.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/emips/gui/main_gui.py b/emips/gui/main_gui.py
new file mode 100644
--- /dev/null	(date 1672798490731)
+++ b/emips/gui/main_gui.py	(date 1672798490731)
@@ -0,0 +1,143 @@
+# coding=utf-8
+
+import inspect
+import java.awt as awt
+import javax.swing as swing
+import mipylib.dataset as dataset
+import mipylib.plotlib as plotlib
+import os
+from com.formdev.flatlaf.extras import FlatSVGIcon
+from java.awt.event import KeyEvent
+from java.io import File
+from javax.imageio import ImageIO
+
+from configure import Configure
+from form import FrmSetting, FrmEmissionPlot
+
+
+class MainGUI(swing.JFrame):
+
+    def __init__(self, app):
+        super(MainGUI, self).__init__()
+        self.milab_app = app
+
+        this_file = inspect.getfile(inspect.currentframe())
+        self.current_path = os.path.abspath(os.path.dirname(this_file))
+        print(self.current_path)
+
+        # Load config file
+        fn = os.path.join(os.path.dirname(self.current_path), 'config.xml')
+        self.config = Configure(fn)
+
+        self.datafile = None
+
+        self.init_gui()
+
+    def init_gui(self):
+        # Add menu bar
+        menubar = swing.JMenuBar()
+        # File menu
+        menu_file = swing.JMenu('File')
+        menu_file.setMnemonic(KeyEvent.VK_F)
+        # Exit menu item
+        menu_item_file_exit = swing.JMenuItem('Exit', None, actionPerformed=self.click_exit)
+        menu_item_file_exit.setMnemonic(KeyEvent.VK_C)
+        menu_file.add(menu_item_file_exit)
+        menubar.add(menu_file)
+
+        # Emission menu
+        menu_emission = swing.JMenu('Emission')
+        menu_emission.setMnemonic(KeyEvent.VK_E)
+        # Plot menu item
+        menu_item_emission_plot = swing.JMenuItem('Read & plot', None, actionPerformed=self.click_emission_plot)
+        menu_emission.add(menu_item_emission_plot)
+        menubar.add(menu_emission)
+
+        # Temporal menu
+        menu_temporal = swing.JMenu('Temporal')
+
+        # Options menu
+        menu_options = swing.JMenu('Options')
+        menu_options.setMnemonic(KeyEvent.VK_O)
+        # Setting menu item
+        menu_item_setting = swing.JMenuItem('Setting', None, actionPerformed=self.click_setting)
+        menu_options.add(menu_item_setting)
+        menubar.add(menu_options)
+
+        self.setJMenuBar(menubar)
+
+        # Add toolbar
+        toolbar = swing.JToolBar()
+        toolbar.setPreferredSize(awt.Dimension(300, 25))
+        self.add(toolbar, awt.BorderLayout.NORTH)
+        # Add open file button
+        icon = FlatSVGIcon(File(os.path.join(self.current_path, 'image', 'file-open.svg')))
+        open_button = swing.JButton(icon, actionPerformed=self.click_openfile)
+        toolbar.add(open_button)
+        toolbar.addSeparator()
+
+        # Add main panel
+        split_pane = swing.JSplitPane()
+        self.add(split_pane, awt.BorderLayout.CENTER)
+        # Add config panel
+        tabbed_pane = swing.JTabbedPane()
+        layer_panel = swing.JPanel()
+        tabbed_pane.addTab('Layer', layer_panel)
+        split_pane.setLeftComponent(tabbed_pane)
+        # Add figure
+        self.fig = plotlib.Figure()
+        self.fig.set_mousemode('pan')
+        self.axes = plotlib.MapAxes()
+        self.fig.add_axes(self.axes)
+        self.load_layers()
+        split_pane.setRightComponent(self.fig)
+        split_pane.setDividerLocation(0.3)
+
+        self.pack()
+
+        # Set main form
+        icon = ImageIO.read(File(os.path.join(self.current_path, 'image/earth_24.png')))
+        self.title = 'EMIPS'
+        self.setIconImage(icon)
+        self.defaultCloseOperation = swing.JFrame.DISPOSE_ON_CLOSE
+        self.windowClosing = self.form_closing
+
+    def load_layers(self):
+        self.axes.geoshow('cn_province', edgecolor='b')
+
+    def click_openfile(self, e):
+        fc = swing.JFileChooser(self.config.open_path)
+        r = fc.showOpenDialog(self)
+        if r == swing.JFileChooser.APPROVE_OPTION:
+            f = fc.getSelectedFile()
+            print(f)
+            self.config.open_path = f.parent
+            self.datafile = dataset.addfile(f.path)
+
+    def click_emission_plot(self, e):
+        print("emission plot menu item")
+        frm_emission = FrmEmissionPlot(self, False)
+        frm_emission.pack()
+        frm_emission.locationRelativeTo = self
+        frm_emission.visible = True
+
+    def click_setting(self, e):
+        frm_setting = FrmSetting(self, False)
+        frm_setting.pack()
+        frm_setting.locationRelativeTo = self
+        frm_setting.visible = True
+
+    def form_closing(self, e):
+        self.config.save_configure()
+        self.dispose()
+
+    def click_exit(self, e):
+        self.dispose()
+
+
+if __name__ == '__main__':
+    frm = MainGUI(None)
+    frm.pack()
+    frm.size = (1000, 650)
+    frm.locationRelativeTo = None
+    frm.visible = True
Index: emips/gui/form/frm_emission_plot.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/emips/gui/form/frm_emission_plot.py b/emips/gui/form/frm_emission_plot.py
new file mode 100644
--- /dev/null	(date 1672799549235)
+++ b/emips/gui/form/frm_emission_plot.py	(date 1672799549235)
@@ -0,0 +1,51 @@
+# coding=utf-8
+
+import javax.swing as swing
+import java.awt as awt
+
+from emips.utils import SectorEnum
+
+
+class FrmEmissionPlot(swing.JDialog):
+
+    def __init__(self, frm_main, modal):
+        super(FrmEmissionPlot, self).__init__(frm_main, modal)
+
+        self.frm_main = frm_main
+        if frm_main is not None:
+            self.config = frm_main.config
+            self.setIconImage(frm_main.getIconImage())
+        self.modal = modal
+        self.init_gui()        
+        self.title = "Emission data"
+
+    def init_gui(self):
+        panel_base = self.getContentPane()
+        label_sector = swing.JLabel("Sector:")
+        combobox_sector = swing.JComboBox()
+        for se in SectorEnum:
+            combobox_sector.addItem(se.name)
+
+        layout = swing.GroupLayout(panel_base)
+        panel_base.setLayout(layout)
+        layout.setAutoCreateGaps(True)
+        layout.setAutoCreateContainerGaps(True)
+        layout.setHorizontalGroup(
+            layout.createParallelGroup()
+                .addGroup(layout.createSequentialGroup()
+                    .addComponent(label_sector)
+                    .addComponent(combobox_sector)))
+        layout.setVerticalGroup(
+            layout.createSequentialGroup()
+                .addGroup(layout.createParallelGroup(swing.GroupLayout.Alignment.BASELINE)
+                    .addComponent(label_sector)
+                    .addComponent(combobox_sector)))
+
+        self.pack()
+
+if __name__ == '__main__':
+    frm = FrmEmissionPlot(None, False)
+    frm.pack()
+    frm.size = (500, 400)
+    frm.locationRelativeTo = None
+    frm.visible = True
\ No newline at end of file
Index: emips/chem_spec/pollutant_profile.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from .pollutant import Pollutant\r\n\r\n\r\nclass PollutantProfile(object):\r\n\r\n    def __init__(self, pollutant, species_profiles=[]):\r\n        \"\"\"\r\n        Pollutant profile\r\n\r\n        :param pollutant: (*Pollutant*) The pollutant\r\n        :param species_profiles: (*list of SpeciesProfile*) The species profiles\r\n        \"\"\"\r\n        if isinstance(pollutant, basestring):\r\n            pollutant = Pollutant(pollutant)\r\n        self.pollutant = pollutant\r\n        self.species_profiles = []\r\n        self.species_profiles.extend(species_profiles)\r\n\r\n    def __str__(self):\r\n        r = 'Pollutant: {}'.format(self.pollutant.name)\r\n        for prof_item in self.species_profiles:\r\n            r += \"\\n\\t{}\".format(prof_item)\r\n        return r\r\n\r\n    __repr__ = __str__\r\n\r\n    def __getitem__(self, item):\r\n        if isinstance(item, int):\r\n            return self.species_profiles[item]\r\n        else:\r\n            for spec_prof in self.species_profiles:\r\n                if spec_prof.species.name == item:\r\n                    return spec_prof\r\n            raise ValueError(\"Not a valid key: {}\".format(item))\r\n\r\n    def append(self, spec_prof):\r\n        \"\"\"\r\n        Append a species profile\r\n        :param spec_prof: (*SpeciesProfile*) The species profile\r\n        \"\"\"\r\n        self.species_profiles.append(spec_prof)\r\n\r\n    def get_species(self):\r\n        \"\"\"\r\n        Get species\r\n        :return: The species\r\n        \"\"\"\r\n        specs = []\r\n        for spec_prof in self.species_profiles:\r\n            specs.append(spec_prof.species)\r\n        return specs\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/emips/chem_spec/pollutant_profile.py b/emips/chem_spec/pollutant_profile.py
--- a/emips/chem_spec/pollutant_profile.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/emips/chem_spec/pollutant_profile.py	(date 1672761971481)
@@ -1,4 +1,4 @@
-from .pollutant import Pollutant
+from .pollutant import Pollutant, PollutantEnum
 
 
 class PollutantProfile(object):
@@ -12,6 +12,9 @@
         """
         if isinstance(pollutant, basestring):
             pollutant = Pollutant(pollutant)
+        elif isinstance(pollutant, PollutantEnum):
+            pollutant = pollutant.value
+
         self.pollutant = pollutant
         self.species_profiles = []
         self.species_profiles.extend(species_profiles)
Index: emips/gui/form/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/emips/gui/form/__init__.py b/emips/gui/form/__init__.py
new file mode 100644
--- /dev/null	(date 1672796820675)
+++ b/emips/gui/form/__init__.py	(date 1672796820675)
@@ -0,0 +1,2 @@
+from .frm_setting import FrmSetting
+from .frm_emission_plot import FrmEmissionPlot
\ No newline at end of file
Index: emips/gui/form/frm_setting.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/emips/gui/form/frm_setting.py b/emips/gui/form/frm_setting.py
new file mode 100644
--- /dev/null	(date 1672716644029)
+++ b/emips/gui/form/frm_setting.py	(date 1672716644029)
@@ -0,0 +1,87 @@
+# coding=utf-8
+
+import javax.swing as swing
+import java.awt as awt
+from com.formdev.flatlaf.extras import FlatSVGIcon
+from java.io import File
+
+import os
+
+
+class FrmSetting(swing.JDialog):
+
+    def __init__(self, frm_main, modal):
+        super(FrmSetting, self).__init__(frm_main, modal)
+
+        self.frm_main = frm_main
+        self.config = frm_main.config
+        self.modal = modal
+        self.init_gui()
+        self.setIconImage(frm_main.getIconImage())
+
+    def init_gui(self):
+        basic = swing.JPanel()
+        basic.setLayout(swing.BoxLayout(basic, swing.BoxLayout.Y_AXIS))
+        self.add(basic)
+
+        self.title = 'Setting'
+
+        icon = FlatSVGIcon(File(os.path.join(self.frm_main.current_path, 'image', 'file-open.svg')))
+        items = ['Read emission:', 'Run pollutant:']
+        for item in items:
+            row = swing.JPanel()
+            row.setLayout(swing.BoxLayout(row, swing.BoxLayout.X_AXIS))
+            row.add(swing.Box.createRigidArea(awt.Dimension(15, 0)))
+            label = swing.JLabel(item)
+            label.setAlignmentX(awt.Component.CENTER_ALIGNMENT)
+            label.setPreferredSize(awt.Dimension(100,25))
+            row.add(label)
+            text_field = swing.JTextField(text=item)
+            text_field.setPreferredSize(awt.Dimension(300,25))
+            row.add(text_field)
+            button = row.add(swing.JButton('', icon))
+            if item == 'Read emission:':
+                self.read_emission = text_field
+                text_field.text = self.config.read_emission
+                button.actionPerformed = self.click_read_emission
+            elif item == 'Run pollutant:':
+                self.run_pollutant = text_field
+                text_field.text = self.config.run_pollutant
+                button.actionPerformed = self.click_run_pollutant
+
+            row.add(swing.Box.createRigidArea(awt.Dimension(15, 0)))
+            basic.add(row)
+            basic.add(swing.Box.createRigidArea(awt.Dimension(0, 15)))
+
+        ok_button = swing.JButton('OK')
+        ok_button.actionPerformed = self.click_ok
+        basic.add(ok_button)
+        basic.add(swing.Box.createRigidArea(awt.Dimension(0, 15)))
+
+    def click_read_emission(self, e):
+        choose_file = swing.JFileChooser()
+        file = File(self.read_emission.text)
+        if file.isFile():
+            choose_file.setCurrentFile(file)
+        choose_file.setFileSelectionMode(swing.JFileChooser.FILES_ONLY)
+        ret = choose_file.showOpenDialog(self)
+        if ret == swing.JFileChooser.APPROVE_OPTION:
+            file = choose_file.getSelectedFile()
+            self.read_emission.text = file.getAbsolutePath()
+
+    def click_run_pollutant(self, e):
+        choose_file = swing.JFileChooser()
+        file = File(self.run_pollutant.text)
+        if file.isFile():
+            choose_file.setCurrentFile(file)
+        choose_file.setFileSelectionMode(swing.JFileChooser.FILES_ONLY)
+        ret = choose_file.showOpenDialog(self)
+        if ret == swing.JFileChooser.APPROVE_OPTION:
+            file = choose_file.getSelectedFile()
+            self.run_pollutant.text = file.getAbsolutePath()
+
+    def click_ok(self, e):
+        self.config.read_emission = self.read_emission.text
+        self.config.run_pollutant = self.run_pollutant.text
+        self.config.save_configure()
+        self.dispose()
Index: emips/chem_spec/species.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from ..utils import Units, Weight, Area, Period\r\n\r\n\r\nclass Species(object):\r\n\r\n    def __init__(self, name, units=Units(Weight.KG, Area.M2, Period.SECOND),\r\n                 molar_mass=None):\r\n        \"\"\"\r\n        Chemical species\r\n\r\n        :param name: (*str*) Species name\r\n        :param units: (*Units*) Species units\r\n        :param molar_mass: (*float*) Molar mass\r\n        \"\"\"\r\n        self.name = name\r\n        self.units = units\r\n        self.molar_mass = molar_mass\r\n\r\n    def __str__(self):\r\n        s = 'Name: {}; Units: {}'.format(self.name, self.units)\r\n        if not self.molar_mass is None:\r\n            s = s + '; Molar mass: {}'.format(self.molar_mass)\r\n        return s\r\n\r\n    __repr__ = __str__\r\n\r\n    def __eq__(self, other):\r\n        return self.name == other.name and self.units == other.units\r\n\r\n\r\n# Normally used species\r\nclass SpeciesEnum(object):\r\n    PEC = Species(\"PEC\")\r\n    CO = Species(\"CO\", molar_mass=28)\r\n    CH4 = Species(\"CH4\", molar_mass=16)\r\n    NH3 = Species(\"NH3\", molar_mass=17)\r\n    POA = Species(\"POA\")\r\n    SO2 = Species(\"SO2\", molar_mass=64)\r\n    PMC = Species(\"PMC\")\r\n    NO = Species(\"NO\", molar_mass=30)\r\n    NO2 = Species(\"NO2\", molar_mass=46)\r\n    SULF = Species(\"SULF\")\r\n    PMFINE = Species(\"PMFINE\")\r\n    PNO3 = Species(\"PNO3\")\r\n    PSO4 = Species(\"PSO4\")\r\n\r\n    @classmethod\r\n    def all_species(cls):\r\n        \"\"\"\r\n        Get all species\r\n        :return: (*list of species*) All species\r\n        \"\"\"\r\n        species = [cls.PEC, cls.CO, cls.CH4, cls.NH3, cls.POA, cls.SO2, cls.PMC,\r\n                   cls.NO, cls.NO2, cls.SULF, cls.PMFINE, cls.PNO3, cls.PSO4]\r\n        return species\r\n\r\n    @classmethod\r\n    def species(cls, name):\r\n        \"\"\"\r\n        Get species from name\r\n        :param name: (*str*) Species name\r\n        :return: The species\r\n        \"\"\"\r\n        species = cls.all_species()\r\n        for spec in species:\r\n            if spec.name == name:\r\n                return spec\r\n        return Species(name)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/emips/chem_spec/species.py b/emips/chem_spec/species.py
--- a/emips/chem_spec/species.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/emips/chem_spec/species.py	(date 1672759836307)
@@ -1,4 +1,5 @@
 from ..utils import Units, Weight, Area, Period
+from mipylib.enum import Enum
 
 
 class Species(object):
@@ -29,7 +30,7 @@
 
 
 # Normally used species
-class SpeciesEnum(object):
+class SpeciesEnum(Enum):
     PEC = Species("PEC")
     CO = Species("CO", molar_mass=28)
     CH4 = Species("CH4", molar_mass=16)
Index: emips/chem_spec/species_profile.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from .pollutant import Pollutant\r\nfrom .species import Species, SpeciesEnum\r\n\r\n\r\nclass SpeciesProfile(object):\r\n\r\n    def __init__(self, pollutant, species, sf, dv, mf):\r\n        \"\"\"\r\n        Species profile\r\n\r\n        :param pollutant: (*Pollutant*) The pollutant\r\n        :param species: (*Species*) The species\r\n        :param sf: (*float*) Split factor\r\n        :param dv: (*float*) Divisor\r\n        :param mf: (*float*) Mass fraction\r\n        \"\"\"\r\n        if isinstance(pollutant, basestring):\r\n            self.pollutant = Pollutant(pollutant)\r\n        else:\r\n            self.pollutant = pollutant\r\n        if isinstance(species, basestring):\r\n            self.species = Species(species)\r\n        else:\r\n            self.species = species\r\n        self.split_factor = sf\r\n        self.divisor = dv\r\n        self.mass_fraction = mf\r\n\r\n    def __str__(self):\r\n        r = \"{}: split_factor={}, divisor={}, mass_fraction={}\".format(self.species.name, self.split_factor,\r\n                                                                       self.divisor, self.mass_fraction)\r\n        return r\r\n\r\n    __repr__ = __str__\r\n\r\n    @classmethod\r\n    def read_string(cls, line, mechanism=None):\r\n        \"\"\"\r\n        Read pollutant profile item from string line\r\n        :param line: (*str*) The string line\r\n        :param mechanism: (*ChemicalMechanism*) Chemical mechanism\r\n        :return: Pollutant profile item\r\n        \"\"\"\r\n        data = line.split()\r\n        pollutant = Pollutant(data[1])\r\n        if mechanism is None:\r\n            species = SpeciesEnum.species(data[2])\r\n        else:\r\n            species = mechanism.species(data[2])\r\n        return SpeciesProfile(pollutant, species, float(data[3]), float(data[4]), float(data[5]))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/emips/chem_spec/species_profile.py b/emips/chem_spec/species_profile.py
--- a/emips/chem_spec/species_profile.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/emips/chem_spec/species_profile.py	(date 1672761432297)
@@ -1,4 +1,4 @@
-from .pollutant import Pollutant
+from .pollutant import Pollutant, PollutantEnum
 from .species import Species, SpeciesEnum
 
 
@@ -16,12 +16,18 @@
         """
         if isinstance(pollutant, basestring):
             self.pollutant = Pollutant(pollutant)
+        elif isinstance(pollutant, PollutantEnum):
+            self.pollutant = pollutant.value
         else:
             self.pollutant = pollutant
+
         if isinstance(species, basestring):
             self.species = Species(species)
+        elif isinstance(species, SpeciesEnum):
+            self.species = species.value
         else:
             self.species = species
+
         self.split_factor = sf
         self.divisor = dv
         self.mass_fraction = mf
@@ -44,7 +50,7 @@
         data = line.split()
         pollutant = Pollutant(data[1])
         if mechanism is None:
-            species = SpeciesEnum.species(data[2])
+            species = SpeciesEnum[data[2]]
         else:
             species = mechanism.species(data[2])
         return SpeciesProfile(pollutant, species, float(data[3]), float(data[4]), float(data[5]))
Index: run/run_meic_cams_htap/meic/emission_meic_2017.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\n-----MEIC-----\r\n\"\"\"\r\nfrom emips.chem_spec import Pollutant, PollutantEnum\r\nfrom emips.utils import Sector, SectorEnum\r\nfrom emips.spatial_alloc import GridDesc\r\nimport os\r\nfrom mipylib.dataset import addfile_ascii_grid\r\nfrom mipylib import geolib\r\n\r\n__all__ = ['dir_emission', 'emis_grid', 'grid_areas', 'get_emis_fn', 'read_emis']\r\n\r\ndir_emission = r'M:\\Data'  \r\n\r\nemis_grid = GridDesc(geolib.projinfo(), x_orig=70.125, x_cell=0.25, x_num=320,\r\n    y_orig=10.125, y_cell=0.25, y_num=200)\r\n\r\n#Calculate emission grid areas\r\ngrid_areas = emis_grid.grid_areas()    #square meters (array)\r\n\r\ndef get_emis_fn(sector, pollutant, month):\r\n    \"\"\"\r\n    Get emission file path.\r\n\r\n    :param sector: (*Sector*) The emission sector.\r\n    :param pollutant: (*Pollutant*) The pollutant.\r\n    :param month: (*int*) The month.\r\n    :returns: (*string*) Emission file path.\r\n    \"\"\"\r\n    sector_name = sector.name.lower()\r\n    if sector == SectorEnum.ENERGY:\r\n        sector_name = 'power'\r\n    elif sector == SectorEnum.TRANSPORT:\r\n        sector_name = 'transportation'\r\n    pollutant_name = pollutant.name.upper()\r\n    if pollutant == PollutantEnum.PM2_5:\r\n        pollutant_name = 'PM25'\r\n    elif pollutant == PollutantEnum.NMVOC:\r\n        pollutant_name = 'VOC'\r\n    fn = '2017_{:0>2d}_{}_{}.asc'.format(month, sector_name, pollutant_name)\r\n    return os.path.join(dir_emission, fn)\r\n\r\ndef read_emis(sector, pollutant, month):\r\n    \"\"\"\r\n    Read emission data array.\r\n\r\n    :param sector: (*Sector*) The sector.\r\n    :param pollutant: (*Pollutant*) The pollutant.\r\n    :param month: (*int*) The month.\r\n    :returns: (*array*) Emission data array.\r\n    \"\"\"\r\n    fn = get_emis_fn(sector, pollutant, month)\r\n    print('File_in:{}'.format(fn))\r\n    f = addfile_ascii_grid(fn)\r\n    data = f['var'][:]\r\n    return data\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/run/run_meic_cams_htap/meic/emission_meic_2017.py b/run/run_meic_cams_htap/meic/emission_meic_2017.py
--- a/run/run_meic_cams_htap/meic/emission_meic_2017.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/run/run_meic_cams_htap/meic/emission_meic_2017.py	(date 1672759887695)
@@ -1,23 +1,25 @@
 """
 -----MEIC-----
 """
-from emips.chem_spec import Pollutant, PollutantEnum
-from emips.utils import Sector, SectorEnum
-from emips.spatial_alloc import GridDesc
 import os
-from mipylib.dataset import addfile_ascii_grid
 from mipylib import geolib
+from mipylib.dataset import addfile_ascii_grid
+
+from emips.chem_spec import PollutantEnum
+from emips.spatial_alloc import GridDesc
+from emips.utils import SectorEnum
 
 __all__ = ['dir_emission', 'emis_grid', 'grid_areas', 'get_emis_fn', 'read_emis']
 
-dir_emission = r'M:\Data'  
+dir_emission = r'M:\Data'
 
 emis_grid = GridDesc(geolib.projinfo(), x_orig=70.125, x_cell=0.25, x_num=320,
-    y_orig=10.125, y_cell=0.25, y_num=200)
+                     y_orig=10.125, y_cell=0.25, y_num=200)
 
-#Calculate emission grid areas
-grid_areas = emis_grid.grid_areas()    #square meters (array)
+# Calculate emission grid areas
+grid_areas = emis_grid.grid_areas()  # square meters (array)
 
+
 def get_emis_fn(sector, pollutant, month):
     """
     Get emission file path.
@@ -40,6 +42,7 @@
     fn = '2017_{:0>2d}_{}_{}.asc'.format(month, sector_name, pollutant_name)
     return os.path.join(dir_emission, fn)
 
+
 def read_emis(sector, pollutant, month):
     """
     Read emission data array.
Index: run/run_meic_cams_htap/meic/total_run_meic.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\n# Author: Wencong Chen\r\n# Date: 2022-11-27\r\n# Purpose: Process emission data by spatial allocation, temporal allocation\r\n           and chemical speciation(-----MEIC-----).       \r\n\"\"\"\r\n\r\nimport os\r\nimport sys\r\nfrom emips.spatial_alloc import GridDesc\r\n#Set current working directory\r\nfrom inspect import getsourcefile\r\ndir_run = os.path.dirname(os.path.abspath(getsourcefile(lambda:0)))\r\nif not dir_run in sys.path:\r\n    sys.path.append(dir_run)\r\n\r\n#Import preprocessing scripts\r\nimport emission_meic_2017 as emission\r\n\r\ndef run(dire, year, months, model_grid, mechanism_name, mechanism):\r\n    \"\"\"\r\n    Process MEIC emission data by spatial allocation, temporal allocation\r\n    and chemical speciation.\r\n\r\n    :param year: (*int*) Year.\r\n    :param months: (*list*) Months.\r\n    :param model_grid: (*GridDesc*) Model data grid describe.\r\n    :param mechanism_name: (*string*) mechanism's name.\r\n    :param mechanism: (*ChemicalMechanism*) Chemical mechanism.\r\n    \"\"\"\r\n    print('------------------------------------')\r\n    print('-----Processing MEIC data.....------')\r\n    print('------------------------------------')\r\n    for month in months:\r\n        print('##########')\r\n        print('Month: {}'.format(month))\r\n        print('##########')\r\n        \r\n        #Set data output directory\r\n        dir_inter = os.path.join(dire, mechanism_name, r'MEIC\\{0:}\\{0:}{1:>02d}'.format(year, month))\r\n        if not os.path.exists(dir_inter):\r\n            os.makedirs(dir_inter)\r\n        print('Output directory: {}'.format(dir_inter))\r\n        \r\n        #Process emission data except VOC\r\n        print('Process emission data except VOC...')\r\n        import run_pollutants\r\n        run_pollutants.run(year, month, dir_inter, emission, model_grid)\r\n        \r\n        #Process emission data of VOC\r\n        print('Process emission data of VOC...')\r\n        import run_VOC\r\n        run_VOC.run(year, month, dir_inter, emission, model_grid)\r\n        \r\n        #Lump voc according chemical mechanism\r\n        print('Lump voc according chemical mechanism...')\r\n        import lump_VOC\r\n        lump_VOC.run(year, month, dir_inter, mechanism, model_grid)\r\n        \r\n        #Merge all pollutant emission files in one file for each sector\r\n        print('merge all pollutant emission files in one file for each sector...')\r\n        import merge_sector \r\n        merge_sector.run(year, month, dir_inter, model_grid)\r\n        \r\n    print('---------------------------------------')\r\n    print('-----MEIC data completed!!!------')\r\n    print('---------------------------------------')\r\n\r\nif __name__ == '__main__':  \r\n    import time\r\n    time_start = time.time()\r\n    \r\n    #Settings\r\n    year = 2017\r\n    months = [1]\r\n    proj = geolib.projinfo()\r\n    model_grid = GridDesc(proj, x_orig=64., x_cell=0.25, x_num=324,\r\n            y_orig=15., y_cell=0.25, y_num=180)\r\n    mechanism_name = 'radm2'\r\n    dire = r'G:\\test'\r\n    from emips.chem_spec import RADM2_wrfchem as mechanism\r\n    run(dire, year, months, model_grid, mechanism_name, mechanism())\r\n    \r\n    time_end = time.time()\r\n    time = (time_end - time_start) / 60\r\n    print('Time: {:.2f}min'.format(time)) 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/run/run_meic_cams_htap/meic/total_run_meic.py b/run/run_meic_cams_htap/meic/total_run_meic.py
--- a/run/run_meic_cams_htap/meic/total_run_meic.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/run/run_meic_cams_htap/meic/total_run_meic.py	(date 1672762227936)
@@ -8,15 +8,17 @@
 import os
 import sys
 from emips.spatial_alloc import GridDesc
-#Set current working directory
+# Set current working directory
 from inspect import getsourcefile
-dir_run = os.path.dirname(os.path.abspath(getsourcefile(lambda:0)))
-if not dir_run in sys.path:
+
+dir_run = os.path.dirname(os.path.abspath(getsourcefile(lambda: 0)))
+if dir_run not in sys.path:
     sys.path.append(dir_run)
 
-#Import preprocessing scripts
+# Import preprocessing scripts
 import emission_meic_2017 as emission
 
+
 def run(dire, year, months, model_grid, mechanism_name, mechanism):
     """
     Process MEIC emission data by spatial allocation, temporal allocation
@@ -35,52 +37,55 @@
         print('##########')
         print('Month: {}'.format(month))
         print('##########')
-        
-        #Set data output directory
+
+        # Set data output directory
         dir_inter = os.path.join(dire, mechanism_name, r'MEIC\{0:}\{0:}{1:>02d}'.format(year, month))
         if not os.path.exists(dir_inter):
             os.makedirs(dir_inter)
         print('Output directory: {}'.format(dir_inter))
-        
-        #Process emission data except VOC
+
+        # Process emission data except VOC
         print('Process emission data except VOC...')
         import run_pollutants
         run_pollutants.run(year, month, dir_inter, emission, model_grid)
-        
-        #Process emission data of VOC
+
+        # Process emission data of VOC
         print('Process emission data of VOC...')
         import run_VOC
         run_VOC.run(year, month, dir_inter, emission, model_grid)
-        
-        #Lump voc according chemical mechanism
+
+        # Lump voc according chemical mechanism
         print('Lump voc according chemical mechanism...')
         import lump_VOC
         lump_VOC.run(year, month, dir_inter, mechanism, model_grid)
-        
-        #Merge all pollutant emission files in one file for each sector
+
+        # Merge all pollutant emission files in one file for each sector
         print('merge all pollutant emission files in one file for each sector...')
-        import merge_sector 
+        import merge_sector
         merge_sector.run(year, month, dir_inter, model_grid)
-        
+
     print('---------------------------------------')
     print('-----MEIC data completed!!!------')
     print('---------------------------------------')
 
-if __name__ == '__main__':  
+
+if __name__ == '__main__':
     import time
+
     time_start = time.time()
-    
-    #Settings
+
+    # Settings
     year = 2017
     months = [1]
     proj = geolib.projinfo()
     model_grid = GridDesc(proj, x_orig=64., x_cell=0.25, x_num=324,
-            y_orig=15., y_cell=0.25, y_num=180)
+                          y_orig=15., y_cell=0.25, y_num=180)
     mechanism_name = 'radm2'
     dire = r'G:\test'
     from emips.chem_spec import RADM2_wrfchem as mechanism
+
     run(dire, year, months, model_grid, mechanism_name, mechanism())
-    
+
     time_end = time.time()
     time = (time_end - time_start) / 60
-    print('Time: {:.2f}min'.format(time)) 
\ No newline at end of file
+    print('Time: {:.2f}min'.format(time))
Index: run/run_meic_cams_htap/meic/run_VOC.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\n-----MEIC-----\r\n\"\"\"\r\nimport os\r\nimport mipylib.numeric as np\r\nfrom mipylib import dataset\r\nfrom mipylib import geolib\r\n\r\nimport emips\r\nfrom emips.utils import Sector, Units, Weight, Area, Period, emis_util, \\\r\n    SectorEnum\r\nfrom emips.chem_spec import Pollutant, Species, PollutantEnum\r\nfrom emips.spatial_alloc import GridDesc, transform\r\nfrom emips import ge_data_dir\r\n\r\ndef run(year, month, dir_inter, emission, model_grid):\r\n    \"\"\"\r\n    Process VOC emission data by spatial allocation, temporal allocation\r\n    and chemical speciation.\r\n\r\n    :param year: (*int*) Year.\r\n    :param month: (*int*) Month.\r\n    :param dir_inter: (*string*) Data output path.\r\n    :param emission: (*module*) Emission module.\r\n    :param model_grid: (*GridDesc*) Model data grid describe.\r\n    \"\"\"\r\n    #Set profile files\r\n#   temp_profile_fn = os.path.join(ge_data_dir, 'amptpro.m3.default.us+can.txt')\r\n#   temp_ref_fn = os.path.join(ge_data_dir, 'amptref.m3.us+can.cair.txt')\r\n    temp_profile_fn = os.path.join(ge_data_dir,'temporal.txt')\r\n\r\n    #Set dimensions    \r\n    tdim = np.dimension(np.arange(24), 'hour')\r\n    ydim = np.dimension(model_grid.y_coord, 'lat', 'Y')\r\n    xdim = np.dimension(model_grid.x_coord, 'lon', 'X')\r\n    dims = [tdim, ydim, xdim]\r\n    \r\n    #Set sectors and pollutants\r\n    sectors = [SectorEnum.INDUSTRY, SectorEnum.AGRICULTURE, SectorEnum.ENERGY,\r\n        SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]\r\n    fn_sectors = ['inc', 'agr','pow','res','tra']\r\n    pollutant = PollutantEnum.NMVOC\r\n    pollutant.units = Units(Weight.MG, Area.GRID, Period.MONTH)\r\n    \r\n    #Loop\r\n    for sector,fn_sector in zip(sectors,fn_sectors):\r\n        print('-----{}-----'.format(sector.name))\r\n    \r\n        #Get SCC\r\n        scc = emis_util.get_scc(sector)\r\n    \r\n        print('Read emission data...')\r\n        emis_data = emission.read_emis(sector, pollutant, month)    \r\n        \r\n        #### Spatial allocation  \r\n        print('Spatial allocation...')      \r\n        #print('Convert emission data untis from Mg/grid/month to g/m2/month...')\r\n        emis_data = emis_data * 1e6 / emission.grid_areas\r\n        \r\n        #print('Spatial allocation of emission grid to model grid...')\r\n        emis_data = transform(emis_data, emission.emis_grid, model_grid)\r\n        \r\n        #### Temporal allocation\r\n        print('Temporal allocation...')\r\n#       month_profile, week_profile, diurnal_profile, diurnal_profile_we = \\\r\n#           emips.temp_alloc.read_file(temp_ref_fn, temp_profile_fn, scc)\r\n        month_profile, week_profile, diurnal_profile = \\\r\n            emips.temp_alloc.read_file_prof(temp_profile_fn, scc, ti=8)\r\n        #print('To daily emission (g/m2/day)...')\r\n        weekday_data, weekend_data = emips.temp_alloc.week_allocation(emis_data, week_profile, year, month)\r\n        weekday_data = (weekday_data * 5 + weekend_data * 2) / 7\r\n        #print('To hourly emission (g/m2/s)...')\r\n        hour_data = emips.temp_alloc.diurnal_allocation(weekday_data, diurnal_profile) / 3600        \r\n    \r\n        #### Chemical speciation\r\n        print('Chemical speciation...')\r\n        outfn = os.path.join(dir_inter, \\\r\n            '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.name, sector.name, year, month))\r\n        print('Output file: {}'.format(outfn))\r\n    \r\n        #print('Set grid speciation data...')\r\n        fn = r'Z:\\retro_nmvoc_ratio_{}_2000_0.1deg.nc'.format(fn_sector)\r\n        print('Grid speciation file: {}'.format(fn))\r\n        f = dataset.addfile(fn)\r\n    \r\n        #Create output netcdf file and define dimensions, global attributes and variables\r\n        gattrs = dict(Conventions='CF-1.6', Tools='Created using MeteoInfo')\r\n        dimvars = []\r\n        for var in f.variables:\r\n            if var.ndim == 2:\r\n                dimvar = dataset.DimVariable()\r\n                dimvar.name = var.name\r\n                dimvar.dtype = np.dtype.float\r\n                dimvar.dims = dims\r\n                dimvar.addattr('units', 'g/m2/s')\r\n                dimvars.append(dimvar)\r\n        ncfile = dataset.addfile(outfn, 'c')\r\n        ncfile.nc_define(dims, gattrs, dimvars)     \r\n    \r\n        #Write variable values\r\n        ratio_grid = GridDesc(x_orig=0.05, x_cell=0.1, x_num=3600,\r\n            y_orig=-89.95, y_cell=0.1, y_num=1800)\r\n        for dimvar in dimvars:\r\n            print(dimvar.name)\r\n            rdata = f[dimvar.name][:]\r\n            rdata = transform(rdata, ratio_grid, model_grid)\r\n            spec_data = hour_data * rdata\r\n            ncfile.write(dimvar.name, spec_data)\r\n            \r\n        #Close output netcdf file\r\n        f.close()\r\n        ncfile.close()\r\n        
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/run/run_meic_cams_htap/meic/run_VOC.py b/run/run_meic_cams_htap/meic/run_VOC.py
--- a/run/run_meic_cams_htap/meic/run_VOC.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/run/run_meic_cams_htap/meic/run_VOC.py	(date 1672762164428)
@@ -1,17 +1,17 @@
 """
 -----MEIC-----
 """
-import os
 import mipylib.numeric as np
+import os
 from mipylib import dataset
-from mipylib import geolib
 
 import emips
-from emips.utils import Sector, Units, Weight, Area, Period, emis_util, \
-    SectorEnum
-from emips.chem_spec import Pollutant, Species, PollutantEnum
+from emips import ge_data_dir
+from emips.chem_spec import PollutantEnum
 from emips.spatial_alloc import GridDesc, transform
-from emips import ge_data_dir
+from emips.utils import Units, Weight, Area, Period, emis_util, \
+    SectorEnum
+
 
 def run(year, month, dir_inter, emission, model_grid):
     """
@@ -24,66 +24,66 @@
     :param emission: (*module*) Emission module.
     :param model_grid: (*GridDesc*) Model data grid describe.
     """
-    #Set profile files
-#   temp_profile_fn = os.path.join(ge_data_dir, 'amptpro.m3.default.us+can.txt')
-#   temp_ref_fn = os.path.join(ge_data_dir, 'amptref.m3.us+can.cair.txt')
-    temp_profile_fn = os.path.join(ge_data_dir,'temporal.txt')
+    # Set profile files
+    #   temp_profile_fn = os.path.join(ge_data_dir, 'amptpro.m3.default.us+can.txt')
+    #   temp_ref_fn = os.path.join(ge_data_dir, 'amptref.m3.us+can.cair.txt')
+    temp_profile_fn = os.path.join(ge_data_dir, 'temporal.txt')
 
-    #Set dimensions    
+    # Set dimensions
     tdim = np.dimension(np.arange(24), 'hour')
     ydim = np.dimension(model_grid.y_coord, 'lat', 'Y')
     xdim = np.dimension(model_grid.x_coord, 'lon', 'X')
     dims = [tdim, ydim, xdim]
-    
-    #Set sectors and pollutants
+
+    # Set sectors and pollutants
     sectors = [SectorEnum.INDUSTRY, SectorEnum.AGRICULTURE, SectorEnum.ENERGY,
-        SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]
-    fn_sectors = ['inc', 'agr','pow','res','tra']
+               SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]
+    fn_sectors = ['inc', 'agr', 'pow', 'res', 'tra']
     pollutant = PollutantEnum.NMVOC
     pollutant.units = Units(Weight.MG, Area.GRID, Period.MONTH)
-    
-    #Loop
-    for sector,fn_sector in zip(sectors,fn_sectors):
+
+    # Loop
+    for sector, fn_sector in zip(sectors, fn_sectors):
         print('-----{}-----'.format(sector.name))
-    
-        #Get SCC
+
+        # Get SCC
         scc = emis_util.get_scc(sector)
-    
+
         print('Read emission data...')
-        emis_data = emission.read_emis(sector, pollutant, month)    
-        
+        emis_data = emission.read_emis(sector, pollutant, month)
+
         #### Spatial allocation  
-        print('Spatial allocation...')      
-        #print('Convert emission data untis from Mg/grid/month to g/m2/month...')
+        print('Spatial allocation...')
+        # print('Convert emission data untis from Mg/grid/month to g/m2/month...')
         emis_data = emis_data * 1e6 / emission.grid_areas
-        
-        #print('Spatial allocation of emission grid to model grid...')
+
+        # print('Spatial allocation of emission grid to model grid...')
         emis_data = transform(emis_data, emission.emis_grid, model_grid)
-        
+
         #### Temporal allocation
         print('Temporal allocation...')
-#       month_profile, week_profile, diurnal_profile, diurnal_profile_we = \
-#           emips.temp_alloc.read_file(temp_ref_fn, temp_profile_fn, scc)
+        #       month_profile, week_profile, diurnal_profile, diurnal_profile_we = \
+        #           emips.temp_alloc.read_file(temp_ref_fn, temp_profile_fn, scc)
         month_profile, week_profile, diurnal_profile = \
             emips.temp_alloc.read_file_prof(temp_profile_fn, scc, ti=8)
-        #print('To daily emission (g/m2/day)...')
+        # print('To daily emission (g/m2/day)...')
         weekday_data, weekend_data = emips.temp_alloc.week_allocation(emis_data, week_profile, year, month)
         weekday_data = (weekday_data * 5 + weekend_data * 2) / 7
-        #print('To hourly emission (g/m2/s)...')
-        hour_data = emips.temp_alloc.diurnal_allocation(weekday_data, diurnal_profile) / 3600        
-    
+        # print('To hourly emission (g/m2/s)...')
+        hour_data = emips.temp_alloc.diurnal_allocation(weekday_data, diurnal_profile) / 3600
+
         #### Chemical speciation
         print('Chemical speciation...')
-        outfn = os.path.join(dir_inter, \
-            '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.name, sector.name, year, month))
+        outfn = os.path.join(dir_inter,
+                             '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.value.name, sector.value.name, year, month))
         print('Output file: {}'.format(outfn))
-    
-        #print('Set grid speciation data...')
+
+        # print('Set grid speciation data...')
         fn = r'Z:\retro_nmvoc_ratio_{}_2000_0.1deg.nc'.format(fn_sector)
         print('Grid speciation file: {}'.format(fn))
         f = dataset.addfile(fn)
-    
-        #Create output netcdf file and define dimensions, global attributes and variables
+
+        # Create output netcdf file and define dimensions, global attributes and variables
         gattrs = dict(Conventions='CF-1.6', Tools='Created using MeteoInfo')
         dimvars = []
         for var in f.variables:
@@ -95,19 +95,18 @@
                 dimvar.addattr('units', 'g/m2/s')
                 dimvars.append(dimvar)
         ncfile = dataset.addfile(outfn, 'c')
-        ncfile.nc_define(dims, gattrs, dimvars)     
-    
-        #Write variable values
+        ncfile.nc_define(dims, gattrs, dimvars)
+
+        # Write variable values
         ratio_grid = GridDesc(x_orig=0.05, x_cell=0.1, x_num=3600,
-            y_orig=-89.95, y_cell=0.1, y_num=1800)
+                              y_orig=-89.95, y_cell=0.1, y_num=1800)
         for dimvar in dimvars:
             print(dimvar.name)
             rdata = f[dimvar.name][:]
             rdata = transform(rdata, ratio_grid, model_grid)
             spec_data = hour_data * rdata
             ncfile.write(dimvar.name, spec_data)
-            
-        #Close output netcdf file
+
+        # Close output netcdf file
         f.close()
         ncfile.close()
-        
\ No newline at end of file
Index: emips/vertical_alloc/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from .vertical_profile import VerticalProfile\r\nfrom .vertical_allocation import *\r\n\r\n__all__ = ['VerticalProfile']\r\n__all__ += vertical_allocation.__all__
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/emips/vertical_alloc/__init__.py b/emips/vertical_alloc/__init__.py
--- a/emips/vertical_alloc/__init__.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/emips/vertical_alloc/__init__.py	(date 1672751560831)
@@ -2,4 +2,4 @@
 from .vertical_allocation import *
 
 __all__ = ['VerticalProfile']
-__all__ += vertical_allocation.__all__
\ No newline at end of file
+__all__ += vertical_allocation.__all__
Index: emips/vertical_alloc/vertical_profile.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nclass VerticalProfile(object):\r\n\r\n    def __init__(self, weights=None):\r\n        \"\"\"\r\n        Layer profile\r\n        :param id: The id.\r\n        :param weights: The weights\r\n        \"\"\"\r\n        self.weights = weights\r\n\r\n    def __str__(self):\r\n        r = self.__class__.__name__\r\n        r += '\\nWeights: {}'.format(self.weights)\r\n        return r\r\n\r\n    __repr__ = __str__\r\n\r\n    def total_weight(self):\r\n        \"\"\"\r\n        Get total weight\r\n        :return: Total weight\r\n        \"\"\"\r\n        return self.weights.sum()\r\n\r\n    def get_weight(self, idx):\r\n        \"\"\"\r\n        Get weight\r\n        :param idx: The index.\r\n        :return: Weight\r\n        \"\"\"\r\n        return self.weights[idx]\r\n\r\n    def get_ratios(self):\r\n        \"\"\"\r\n        Get weight ratios\r\n        :return: Weight ratios\r\n        \"\"\"\r\n        tw = float(self.total_weight())\r\n        return self.weights / tw\r\n\t
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/emips/vertical_alloc/vertical_profile.py b/emips/vertical_alloc/vertical_profile.py
--- a/emips/vertical_alloc/vertical_profile.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/emips/vertical_alloc/vertical_profile.py	(date 1672751543972)
@@ -38,4 +38,3 @@
         """
         tw = float(self.total_weight())
         return self.weights / tw
-	
\ No newline at end of file
Index: emips/gui/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/emips/gui/__init__.py b/emips/gui/__init__.py
new file mode 100644
--- /dev/null	(date 1672472538251)
+++ b/emips/gui/__init__.py	(date 1672472538251)
@@ -0,0 +1,1 @@
+from . import main_gui
Index: run/run_meic_cams_htap/meic/lump_VOC.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\n-----MEIC-----\r\n\"\"\"\r\nimport os\r\nimport mipylib.numeric as np\r\nfrom mipylib import dataset\r\nfrom mipylib import geolib\r\n\r\nimport emips\r\nfrom emips.utils import Sector, SectorEnum\r\nfrom emips.chem_spec import Pollutant, PollutantEnum\r\nfrom emips.spatial_alloc import GridDesc\r\n\r\ndef run(year, month, dir_inter, chem_mech, model_grid):\r\n    \"\"\"\r\n    Lump VOC species according chemical mechanism.\r\n\r\n    :param year: (*int*) Year.\r\n    :param month: (*int*) Month.\r\n    :param dir_inter: (*string*) Data input and output path.\r\n    :param chem_mech: (*ChemicalMechanism*) Chemical mechanism.\r\n    :param model_grid: (*GridDesc*) Model data grid describe.\r\n    \"\"\"\r\n    #Set sectors and pollutants\r\n    sectors = [SectorEnum.INDUSTRY, SectorEnum.AGRICULTURE, SectorEnum.ENERGY,\r\n        SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]\r\n    pollutant = PollutantEnum.NMVOC\r\n\r\n    #Set dimensions\r\n    tdim = np.dimension(np.arange(24), 'hour')\r\n    ydim = np.dimension(model_grid.y_coord, 'lat', 'Y')\r\n    xdim = np.dimension(model_grid.x_coord, 'lon', 'X')\r\n    dims = [tdim, ydim, xdim]\r\n    \r\n    #Sector loop\r\n    for sector in sectors:\r\n        print('-----{}-----'.format(sector.name))\r\n\r\n        #Set input file\r\n        infn = os.path.join(dir_inter, \\\r\n            '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.name, sector.name, year, month))\r\n        print('Input file: {}'.format(infn))\r\n        #Open input file\r\n        inf = dataset.addfile(infn)\r\n        #Read a reference data\r\n        vname = inf.varnames[4]\r\n        rdata = inf[vname][:]\r\n        rdata[rdata!=np.nan] = 0.\r\n    \r\n        #Set output file\r\n        outfn = os.path.join(dir_inter, \\\r\n            '{}_emis_lump_{}_{}_{}_hour.nc'.format(pollutant.name, sector.name, year, month))\r\n        print('Output file: {}'.format(outfn))\r\n        #Create output netcdf file\r\n        ncfile = dataset.addfile(outfn, 'c')\r\n        #Set global attribute\r\n        gattrs = dict(Conventions='CF-1.6', Tools='Created using MeteoInfo')\r\n        #Set variables\r\n        dimvars = []\r\n        for spec in chem_mech.nmvoc_species():\r\n            dimvar = dataset.DimVariable()\r\n            dimvar.name = spec.name\r\n            dimvar.dtype = np.dtype.float\r\n            dimvar.dims = dims\r\n            #dimvar.addattr('units', 'mol/m2/s')\r\n            if spec.molar_mass is None:\r\n                dimvar.addattr('units', 'g/m2/s')\r\n            else:\r\n                dimvar.addattr('units', 'mole/m2/s')\r\n            dimvars.append(dimvar)\r\n        #Define dimensions, global attributes and variables\r\n        ncfile.nc_define(dims, gattrs, dimvars)\r\n    \r\n        #Write variable values\r\n        for spec, dimvar in zip(chem_mech.nmvoc_species(), dimvars):    \r\n            print('{} species: {}'.format(chem_mech.name, spec))\r\n            rspecs = chem_mech.lump_RETRO(spec)\r\n            print('RETRO species: {}'.format(rspecs))\r\n            data = None\r\n            for rspec, ratio in rspecs.iteritems():\r\n                if rspec.name in inf.varnames:\r\n                    if data is None:\r\n                        data = inf[rspec.name][:] * ratio\r\n                    else:\r\n                        data = data + inf[rspec.name][:] * ratio\r\n            if data is None:\r\n                print('No RETRO species!---{}'.format(dimvar.name))\r\n                ncfile.write(dimvar.name, rdata)\r\n            else:\r\n                if spec.molar_mass is not None:\r\n                    #print('Convert (g/m2/s) to (mole/m2/s)')\r\n                    data = data / spec.molar_mass\r\n                ncfile.write(dimvar.name, data)\r\n    \r\n        #Close output netcdf file\r\n        inf.close()\r\n        ncfile.close()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/run/run_meic_cams_htap/meic/lump_VOC.py b/run/run_meic_cams_htap/meic/lump_VOC.py
--- a/run/run_meic_cams_htap/meic/lump_VOC.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/run/run_meic_cams_htap/meic/lump_VOC.py	(date 1672762508034)
@@ -1,15 +1,13 @@
 """
 -----MEIC-----
 """
-import os
 import mipylib.numeric as np
+import os
 from mipylib import dataset
-from mipylib import geolib
 
-import emips
-from emips.utils import Sector, SectorEnum
-from emips.chem_spec import Pollutant, PollutantEnum
-from emips.spatial_alloc import GridDesc
+from emips.chem_spec import PollutantEnum
+from emips.utils import SectorEnum
+
 
 def run(year, month, dir_inter, chem_mech, model_grid):
     """
@@ -21,58 +19,58 @@
     :param chem_mech: (*ChemicalMechanism*) Chemical mechanism.
     :param model_grid: (*GridDesc*) Model data grid describe.
     """
-    #Set sectors and pollutants
+    # Set sectors and pollutants
     sectors = [SectorEnum.INDUSTRY, SectorEnum.AGRICULTURE, SectorEnum.ENERGY,
-        SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]
+               SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]
     pollutant = PollutantEnum.NMVOC
 
-    #Set dimensions
+    # Set dimensions
     tdim = np.dimension(np.arange(24), 'hour')
     ydim = np.dimension(model_grid.y_coord, 'lat', 'Y')
     xdim = np.dimension(model_grid.x_coord, 'lon', 'X')
     dims = [tdim, ydim, xdim]
-    
-    #Sector loop
+
+    # Sector loop
     for sector in sectors:
         print('-----{}-----'.format(sector.name))
 
-        #Set input file
-        infn = os.path.join(dir_inter, \
-            '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.name, sector.name, year, month))
+        # Set input file
+        infn = os.path.join(dir_inter,
+                            '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.value.name, sector.value.name, year, month))
         print('Input file: {}'.format(infn))
-        #Open input file
+        # Open input file
         inf = dataset.addfile(infn)
-        #Read a reference data
+        # Read a reference data
         vname = inf.varnames[4]
         rdata = inf[vname][:]
-        rdata[rdata!=np.nan] = 0.
-    
-        #Set output file
+        rdata[rdata != np.nan] = 0.
+
+        # Set output file
         outfn = os.path.join(dir_inter, \
-            '{}_emis_lump_{}_{}_{}_hour.nc'.format(pollutant.name, sector.name, year, month))
+                             '{}_emis_lump_{}_{}_{}_hour.nc'.format(pollutant.value.name, sector.value.name, year, month))
         print('Output file: {}'.format(outfn))
-        #Create output netcdf file
+        # Create output netcdf file
         ncfile = dataset.addfile(outfn, 'c')
-        #Set global attribute
+        # Set global attribute
         gattrs = dict(Conventions='CF-1.6', Tools='Created using MeteoInfo')
-        #Set variables
+        # Set variables
         dimvars = []
         for spec in chem_mech.nmvoc_species():
             dimvar = dataset.DimVariable()
             dimvar.name = spec.name
             dimvar.dtype = np.dtype.float
             dimvar.dims = dims
-            #dimvar.addattr('units', 'mol/m2/s')
+            # dimvar.addattr('units', 'mol/m2/s')
             if spec.molar_mass is None:
                 dimvar.addattr('units', 'g/m2/s')
             else:
                 dimvar.addattr('units', 'mole/m2/s')
             dimvars.append(dimvar)
-        #Define dimensions, global attributes and variables
+        # Define dimensions, global attributes and variables
         ncfile.nc_define(dims, gattrs, dimvars)
-    
-        #Write variable values
-        for spec, dimvar in zip(chem_mech.nmvoc_species(), dimvars):    
+
+        # Write variable values
+        for spec, dimvar in zip(chem_mech.nmvoc_species(), dimvars):
             print('{} species: {}'.format(chem_mech.name, spec))
             rspecs = chem_mech.lump_RETRO(spec)
             print('RETRO species: {}'.format(rspecs))
@@ -88,10 +86,10 @@
                 ncfile.write(dimvar.name, rdata)
             else:
                 if spec.molar_mass is not None:
-                    #print('Convert (g/m2/s) to (mole/m2/s)')
+                    # print('Convert (g/m2/s) to (mole/m2/s)')
                     data = data / spec.molar_mass
                 ncfile.write(dimvar.name, data)
-    
-        #Close output netcdf file
+
+        # Close output netcdf file
         inf.close()
         ncfile.close()
Index: run/run_meic_cams_htap/meic/run_pollutants.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\n-----MEIC-----\r\n\"\"\"\r\nimport os\r\nimport mipylib.numeric as np\r\nfrom mipylib import dataset\r\nfrom mipylib import geolib\r\n\r\nimport emips\r\nfrom emips.utils import Sector, Units, Weight, Area, Period, emis_util, \\\r\n    SectorEnum\r\nfrom emips.chem_spec import Pollutant, Species, PollutantProfile, SpeciesProfile, \\\r\n    PollutantEnum, SpeciesEnum\r\nfrom emips.spatial_alloc import GridDesc, transform\r\nfrom emips import ge_data_dir\r\n\r\ndef run(year, month, dir_inter, emission, model_grid):\r\n    \"\"\"\r\n    Process emission data by spatial allocation, temporal allocation\r\n    and chemical speciation except VOC pollution.\r\n\r\n    :param year: (*int*) Year.\r\n    :param month: (*int*) Month.\r\n    :param dir_inter: (*string*) Data output path.\r\n    :param emission: (*module*) Emission module.\r\n    :param model_grid: (*GridDesc*) Model data grid describe.\r\n    \"\"\"\r\n    #Set profile files\r\n#   temp_profile_fn = os.path.join(ge_data_dir, 'amptpro.m3.default.us+can.txt')\r\n#   temp_ref_fn = os.path.join(ge_data_dir, 'amptref.m3.us+can.cair.txt')\r\n    temp_profile_fn = os.path.join(ge_data_dir,'temporal.txt')\r\n    \r\n    spec_profile_fn = os.path.join(ge_data_dir, 'gspro.cmaq.radm2p25_rev.txt')\r\n    spec_ref_fn = os.path.join(ge_data_dir, 'gsref.cmaq.radm2p25.txt')       \r\n    \r\n    #Set dimensions\r\n    tdim = np.dimension(np.arange(24), 'hour')\r\n    ydim = np.dimension(model_grid.y_coord, 'lat', 'Y')\r\n    xdim = np.dimension(model_grid.x_coord, 'lon', 'X')\r\n    dims = [tdim, ydim, xdim]\r\n    \r\n    #Set sectors and pollutants\r\n    sectors = [SectorEnum.INDUSTRY, SectorEnum.AGRICULTURE, SectorEnum.ENERGY,\r\n        SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]\r\n    pollutants = [PollutantEnum.BC, PollutantEnum.CO, PollutantEnum.NH3, \\\r\n        PollutantEnum.NOx, PollutantEnum.OC, PollutantEnum.PM2_5, \\\r\n        PollutantEnum.SO2, PollutantEnum.PM10]\r\n    out_species = [SpeciesEnum.PEC, SpeciesEnum.CO, SpeciesEnum.NH3, \\\r\n        None, SpeciesEnum.POA, None, SpeciesEnum.SO2, SpeciesEnum.PMC]\r\n\r\n    #Loop\r\n    for sector in sectors:\r\n        print('-----{}-----'.format(sector.name))\r\n        \r\n        #Get SCC\r\n        scc = emis_util.get_scc(sector)\r\n        \r\n        #Get pollutant profiles\r\n        pollutant_profiles = emips.chem_spec.read_file(spec_ref_fn, spec_profile_fn, scc)\r\n        for pollutant, out_spec in zip(pollutants, out_species):\r\n            print(pollutant)\r\n    \r\n            print('Read emission data...')\r\n            emis_data = emission.read_emis(sector, pollutant, month)\r\n\r\n            #Remove PM2.5 included in PM10, Remove BC and OC included in PM2.5\r\n            if pollutant == PollutantEnum.PM10:\r\n                emis_data_pm25 = emission.read_emis(sector, PollutantEnum.PM2_5, month)\r\n                emis_data = emis_data - emis_data_pm25\r\n            if pollutant == PollutantEnum.PM2_5:\r\n                emis_data_bc = emission.read_emis(sector, PollutantEnum.BC, month)\r\n                emis_data_oc = emission.read_emis(sector, PollutantEnum.OC, month)\r\n                emis_data = emis_data - emis_data_bc - emis_data_oc\r\n            \r\n            #### Spatial allocation  \r\n            print('Spatial allocation...')      \r\n            #print('Convert emission data untis from Mg/grid/month to g/m2/month...')\r\n            emis_data = emis_data * 1e6 / emission.grid_areas\r\n            \r\n            #print('Spatial allocation of emission grid to model grid...')\r\n            emis_data = transform(emis_data, emission.emis_grid, model_grid)\r\n            \r\n            #### Temporal allocation\r\n            print('Temporal allocation...')\r\n#            month_profile, week_profile, diurnal_profile, diurnal_profile_we = \\\r\n#                emips.temp_alloc.read_file(temp_ref_fn, temp_profile_fn, scc)\r\n            month_profile, week_profile, diurnal_profile = \\\r\n                emips.temp_alloc.read_file_prof(temp_profile_fn, scc, ti=8)\r\n            #print('To daily emission (g/m2/day)...')\r\n            weekday_data, weekend_data = emips.temp_alloc.week_allocation(emis_data, week_profile, year, month)\r\n            weekday_data = (weekday_data*5 + weekend_data*2) / 7\r\n            #print('To hourly emission (g/m2/s)...')\r\n            hour_data = emips.temp_alloc.diurnal_allocation(weekday_data, diurnal_profile) / 3600        \r\n    \r\n            #### Chemical speciation\r\n            if pollutant == PollutantEnum.PM2_5:\r\n                poll_prof = PollutantProfile(pollutant)\r\n                poll_prof.append(SpeciesProfile(pollutant, SpeciesEnum.PEC, 0, 1, 0))\r\n                poll_prof.append(SpeciesProfile(pollutant, SpeciesEnum.PMFINE, 1, 1, 1))\r\n                poll_prof.append(SpeciesProfile(pollutant, SpeciesEnum.PNO3, 0, 1, 0))\r\n                poll_prof.append(SpeciesProfile(pollutant, SpeciesEnum.POA, 0, 1, 0))\r\n                poll_prof.append(SpeciesProfile(pollutant, SpeciesEnum.PSO4, 0, 1, 0))\r\n            else:\r\n                poll_prof = emips.chem_spec.get_pollutant_profile(pollutant_profiles, pollutant)\r\n            #poll_prof = emips.chem_spec.get_pollutant_profile(pollutant_profiles, pollutant)\r\n            if (pollutant == PollutantEnum.NOx) and (poll_prof is None):\r\n                poll_prof = PollutantProfile(pollutant)\r\n                poll_prof.append(SpeciesProfile(pollutant, Species('NO', molar_mass=30), 0.9, 46.0, 0.9))\r\n                poll_prof.append(SpeciesProfile(pollutant, Species('NO2', molar_mass=46), 0.1, 46.0, 0.1))\r\n            outfn = os.path.join(dir_inter, \\\r\n                '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.name, sector.name, year, month))\r\n            print('output file: {}'.format(outfn))\r\n            if poll_prof is None:\r\n                #### Save hourly emission data\r\n                print('Save hourly emission data...')  \r\n                if out_spec.molar_mass is None:                      \r\n                    attrs = dict(units='g/m2/s')\r\n                else:\r\n                    attrs = dict(units='mole/m2/s')\r\n                    #print('To (mole/m2/s)')\r\n                    hour_data = hour_data / out_spec.molar_mass\r\n                dataset.ncwrite(outfn, hour_data, out_spec.name, dims, attrs)\r\n            else:\r\n                print('Chemical speciation...')\r\n                specs = poll_prof.get_species()\r\n                gattrs = dict(Conventions='CF-1.6', Tools='Created using MeteoInfo')\r\n                dimvars = []\r\n                for spec in specs:\r\n                    dimvar = dataset.DimVariable()\r\n                    dimvar.name = spec.name\r\n                    dimvar.dtype = np.dtype.float\r\n                    dimvar.dims = dims\r\n                    if spec.molar_mass is None:\r\n                        dimvar.addattr('units', 'g/m2/s')\r\n                    else:\r\n                        dimvar.addattr('units', 'mole/m2/s')\r\n                    dimvars.append(dimvar)\r\n                ncfile = dataset.addfile(outfn, 'c')\r\n                ncfile.nc_define(dims, gattrs, dimvars)\r\n                for spec_prof,dimvar,spec in zip(poll_prof.species_profiles, dimvars, specs):\r\n                    print(dimvar.name)\r\n                    spec_data = hour_data * spec_prof.mass_fraction\r\n                    if not spec.molar_mass is None:\r\n                        #print('To (mole/m2/s)')\r\n                        spec_data = spec_data / spec.molar_mass\r\n                    ncfile.write(dimvar.name, spec_data)\r\n                ncfile.close()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/run/run_meic_cams_htap/meic/run_pollutants.py b/run/run_meic_cams_htap/meic/run_pollutants.py
--- a/run/run_meic_cams_htap/meic/run_pollutants.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/run/run_meic_cams_htap/meic/run_pollutants.py	(date 1672762023196)
@@ -1,18 +1,18 @@
 """
 -----MEIC-----
 """
-import os
 import mipylib.numeric as np
+import os
 from mipylib import dataset
-from mipylib import geolib
 
 import emips
-from emips.utils import Sector, Units, Weight, Area, Period, emis_util, \
-    SectorEnum
-from emips.chem_spec import Pollutant, Species, PollutantProfile, SpeciesProfile, \
+from emips import ge_data_dir
+from emips.chem_spec import Species, PollutantProfile, SpeciesProfile, \
     PollutantEnum, SpeciesEnum
-from emips.spatial_alloc import GridDesc, transform
-from emips import ge_data_dir
+from emips.spatial_alloc import transform
+from emips.utils import emis_util, \
+    SectorEnum
+
 
 def run(year, month, dir_inter, emission, model_grid):
     """
@@ -25,45 +25,45 @@
     :param emission: (*module*) Emission module.
     :param model_grid: (*GridDesc*) Model data grid describe.
     """
-    #Set profile files
-#   temp_profile_fn = os.path.join(ge_data_dir, 'amptpro.m3.default.us+can.txt')
-#   temp_ref_fn = os.path.join(ge_data_dir, 'amptref.m3.us+can.cair.txt')
-    temp_profile_fn = os.path.join(ge_data_dir,'temporal.txt')
-    
+    # Set profile files
+    #   temp_profile_fn = os.path.join(ge_data_dir, 'amptpro.m3.default.us+can.txt')
+    #   temp_ref_fn = os.path.join(ge_data_dir, 'amptref.m3.us+can.cair.txt')
+    temp_profile_fn = os.path.join(ge_data_dir, 'temporal.txt')
+
     spec_profile_fn = os.path.join(ge_data_dir, 'gspro.cmaq.radm2p25_rev.txt')
-    spec_ref_fn = os.path.join(ge_data_dir, 'gsref.cmaq.radm2p25.txt')       
-    
-    #Set dimensions
+    spec_ref_fn = os.path.join(ge_data_dir, 'gsref.cmaq.radm2p25.txt')
+
+    # Set dimensions
     tdim = np.dimension(np.arange(24), 'hour')
     ydim = np.dimension(model_grid.y_coord, 'lat', 'Y')
     xdim = np.dimension(model_grid.x_coord, 'lon', 'X')
     dims = [tdim, ydim, xdim]
-    
-    #Set sectors and pollutants
+
+    # Set sectors and pollutants
     sectors = [SectorEnum.INDUSTRY, SectorEnum.AGRICULTURE, SectorEnum.ENERGY,
-        SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]
-    pollutants = [PollutantEnum.BC, PollutantEnum.CO, PollutantEnum.NH3, \
-        PollutantEnum.NOx, PollutantEnum.OC, PollutantEnum.PM2_5, \
-        PollutantEnum.SO2, PollutantEnum.PM10]
-    out_species = [SpeciesEnum.PEC, SpeciesEnum.CO, SpeciesEnum.NH3, \
-        None, SpeciesEnum.POA, None, SpeciesEnum.SO2, SpeciesEnum.PMC]
+               SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]
+    pollutants = [PollutantEnum.BC, PollutantEnum.CO, PollutantEnum.NH3,
+                  PollutantEnum.NOx, PollutantEnum.OC, PollutantEnum.PM2_5,
+                  PollutantEnum.SO2, PollutantEnum.PM10]
+    out_species = [SpeciesEnum.PEC, SpeciesEnum.CO, SpeciesEnum.NH3,
+                   None, SpeciesEnum.POA, None, SpeciesEnum.SO2, SpeciesEnum.PMC]
 
-    #Loop
+    # Loop
     for sector in sectors:
         print('-----{}-----'.format(sector.name))
-        
-        #Get SCC
+
+        # Get SCC
         scc = emis_util.get_scc(sector)
-        
-        #Get pollutant profiles
+
+        # Get pollutant profiles
         pollutant_profiles = emips.chem_spec.read_file(spec_ref_fn, spec_profile_fn, scc)
         for pollutant, out_spec in zip(pollutants, out_species):
             print(pollutant)
-    
+
             print('Read emission data...')
             emis_data = emission.read_emis(sector, pollutant, month)
 
-            #Remove PM2.5 included in PM10, Remove BC and OC included in PM2.5
+            # Remove PM2.5 included in PM10, Remove BC and OC included in PM2.5
             if pollutant == PollutantEnum.PM10:
                 emis_data_pm25 = emission.read_emis(sector, PollutantEnum.PM2_5, month)
                 emis_data = emis_data - emis_data_pm25
@@ -71,28 +71,28 @@
                 emis_data_bc = emission.read_emis(sector, PollutantEnum.BC, month)
                 emis_data_oc = emission.read_emis(sector, PollutantEnum.OC, month)
                 emis_data = emis_data - emis_data_bc - emis_data_oc
-            
-            #### Spatial allocation  
-            print('Spatial allocation...')      
-            #print('Convert emission data untis from Mg/grid/month to g/m2/month...')
+
+            # Spatial allocation
+            print('Spatial allocation...')
+            # print('Convert emission data unis from Mg/grid/month to g/m2/month...')
             emis_data = emis_data * 1e6 / emission.grid_areas
-            
-            #print('Spatial allocation of emission grid to model grid...')
+
+            # print('Spatial allocation of emission grid to model grid...')
             emis_data = transform(emis_data, emission.emis_grid, model_grid)
-            
-            #### Temporal allocation
+
+            # Temporal allocation
             print('Temporal allocation...')
-#            month_profile, week_profile, diurnal_profile, diurnal_profile_we = \
-#                emips.temp_alloc.read_file(temp_ref_fn, temp_profile_fn, scc)
+            #            month_profile, week_profile, diurnal_profile, diurnal_profile_we = \
+            #                emips.temp_alloc.read_file(temp_ref_fn, temp_profile_fn, scc)
             month_profile, week_profile, diurnal_profile = \
                 emips.temp_alloc.read_file_prof(temp_profile_fn, scc, ti=8)
-            #print('To daily emission (g/m2/day)...')
+            # print('To daily emission (g/m2/day)...')
             weekday_data, weekend_data = emips.temp_alloc.week_allocation(emis_data, week_profile, year, month)
-            weekday_data = (weekday_data*5 + weekend_data*2) / 7
-            #print('To hourly emission (g/m2/s)...')
-            hour_data = emips.temp_alloc.diurnal_allocation(weekday_data, diurnal_profile) / 3600        
-    
-            #### Chemical speciation
+            weekday_data = (weekday_data * 5 + weekend_data * 2) / 7
+            # print('To hourly emission (g/m2/s)...')
+            hour_data = emips.temp_alloc.diurnal_allocation(weekday_data, diurnal_profile) / 3600
+
+            # Chemical speciation
             if pollutant == PollutantEnum.PM2_5:
                 poll_prof = PollutantProfile(pollutant)
                 poll_prof.append(SpeciesProfile(pollutant, SpeciesEnum.PEC, 0, 1, 0))
@@ -102,24 +102,24 @@
                 poll_prof.append(SpeciesProfile(pollutant, SpeciesEnum.PSO4, 0, 1, 0))
             else:
                 poll_prof = emips.chem_spec.get_pollutant_profile(pollutant_profiles, pollutant)
-            #poll_prof = emips.chem_spec.get_pollutant_profile(pollutant_profiles, pollutant)
+            # poll_prof = emips.chem_spec.get_pollutant_profile(pollutant_profiles, pollutant)
             if (pollutant == PollutantEnum.NOx) and (poll_prof is None):
                 poll_prof = PollutantProfile(pollutant)
                 poll_prof.append(SpeciesProfile(pollutant, Species('NO', molar_mass=30), 0.9, 46.0, 0.9))
                 poll_prof.append(SpeciesProfile(pollutant, Species('NO2', molar_mass=46), 0.1, 46.0, 0.1))
-            outfn = os.path.join(dir_inter, \
-                '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.name, sector.name, year, month))
+            outfn = os.path.join(dir_inter,
+                                 '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.value.name, sector.value.name, year, month))
             print('output file: {}'.format(outfn))
             if poll_prof is None:
-                #### Save hourly emission data
-                print('Save hourly emission data...')  
-                if out_spec.molar_mass is None:                      
+                # Save hourly emission data
+                print('Save hourly emission data...')
+                if out_spec.value.molar_mass is None:
                     attrs = dict(units='g/m2/s')
                 else:
                     attrs = dict(units='mole/m2/s')
-                    #print('To (mole/m2/s)')
-                    hour_data = hour_data / out_spec.molar_mass
-                dataset.ncwrite(outfn, hour_data, out_spec.name, dims, attrs)
+                    # print('To (mole/m2/s)')
+                    hour_data = hour_data / out_spec.value.molar_mass
+                dataset.ncwrite(outfn, hour_data, out_spec.value.name, dims, attrs)
             else:
                 print('Chemical speciation...')
                 specs = poll_prof.get_species()
@@ -137,11 +137,11 @@
                     dimvars.append(dimvar)
                 ncfile = dataset.addfile(outfn, 'c')
                 ncfile.nc_define(dims, gattrs, dimvars)
-                for spec_prof,dimvar,spec in zip(poll_prof.species_profiles, dimvars, specs):
+                for spec_prof, dimvar, spec in zip(poll_prof.species_profiles, dimvars, specs):
                     print(dimvar.name)
                     spec_data = hour_data * spec_prof.mass_fraction
-                    if not spec.molar_mass is None:
-                        #print('To (mole/m2/s)')
+                    if spec.molar_mass is not None:
+                        # print('To (mole/m2/s)')
                         spec_data = spec_data / spec.molar_mass
                     ncfile.write(dimvar.name, spec_data)
                 ncfile.close()
Index: emips/vertical_alloc/vertical_allocation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from .vertical_profile import VerticalProfile\r\nimport mipylib.numeric as np\r\n\r\n__all__ = ['read_file']\r\n\r\ndef read_file(profile_fn, scc):\r\n    \"\"\"\r\n    Read temporal profiles from profile files\r\n    :param profile_fn: The profile file\r\n    :param scc: Source classific code\r\n    :return: Vertical profile\r\n    \"\"\"\r\n    vertical_profile = VerticalProfile()\r\n    profile_f = open(profile_fn)\r\n    line = profile_f.readline()\r\n    while line:\r\n        line = line.strip()\r\n        if line == \"/HEIGHT/\":\r\n            while True:\r\n                line = profile_f.readline().split()\r\n                if line == \"/END/\":\r\n                    break\r\n                if line[0] == scc:\r\n                    line = [ float(x) for x in line]\r\n                    vertical_profile.weights = np.array(line[1:]).astype('float')\r\n                    break\r\n        line = profile_f.readline()\r\n    profile_f.flush()\r\n    profile_f.close()\r\n    return vertical_profile\r\n\r\n    
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/emips/vertical_alloc/vertical_allocation.py b/emips/vertical_alloc/vertical_allocation.py
--- a/emips/vertical_alloc/vertical_allocation.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/emips/vertical_alloc/vertical_allocation.py	(date 1672751560843)
@@ -3,6 +3,7 @@
 
 __all__ = ['read_file']
 
+
 def read_file(profile_fn, scc):
     """
     Read temporal profiles from profile files
@@ -21,12 +22,10 @@
                 if line == "/END/":
                     break
                 if line[0] == scc:
-                    line = [ float(x) for x in line]
+                    line = [float(x) for x in line]
                     vertical_profile.weights = np.array(line[1:]).astype('float')
                     break
         line = profile_f.readline()
     profile_f.flush()
     profile_f.close()
     return vertical_profile
-
-    
\ No newline at end of file
Index: run/run_meic_cams_htap/meic/merge_sector.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\n-----MEIC-----\r\n\"\"\"\r\nimport os\r\nimport mipylib.numeric as np\r\nfrom mipylib import dataset\r\nfrom mipylib import geolib\r\n\r\nimport emips\r\nfrom emips.utils import Sector, SectorEnum\r\nfrom emips.chem_spec import Pollutant, PollutantEnum\r\nfrom emips.spatial_alloc import GridDesc\r\n\r\ndef run(year, month, dir_inter, model_grid):\r\n    \"\"\"\r\n    Merge all pollutant emission files in one file for each sector.\r\n\r\n    :param year: (*int*) Year.\r\n    :param month: (*int*) Month.\r\n    :param dir_inter: (*string*) Data input and output path.\r\n    :param model_grid: (*GridDesc*) Model data grid describe.\r\n    \"\"\"\r\n    #Set sectors and pollutants\r\n    sectors = [SectorEnum.INDUSTRY, SectorEnum.AGRICULTURE, SectorEnum.ENERGY,\r\n        SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]\r\n\r\n    pollutants = [PollutantEnum.BC, PollutantEnum.CO, PollutantEnum.NH3, \\\r\n        PollutantEnum.NOx, PollutantEnum.OC, PollutantEnum.PM2_5, \\\r\n        PollutantEnum.SO2, PollutantEnum.PM10, PollutantEnum.NMVOC]\r\n\r\n    #Set dimensions\r\n    tdim = np.dimension(np.arange(24), 'hour')\r\n    ydim = np.dimension(model_grid.y_coord, 'lat', 'Y')\r\n    xdim = np.dimension(model_grid.x_coord, 'lon', 'X')\r\n    dims = [tdim, ydim, xdim]\r\n    \r\n    #Sector loop\r\n    for sector in sectors:\r\n        print('-----{}-----'.format(sector.name))\r\n    \r\n        #Set output sector emission file name\r\n        outfn = os.path.join(dir_inter, \\\r\n            'emis_{}_{}_{}_hour.nc'.format(sector.name, year, month))\r\n        print('File_out: {}'.format(outfn))\r\n    \r\n        #Pollutant loop\r\n        dimvars = []\r\n        dict_spec = {}\r\n        for pollutant in pollutants:\r\n            #Read data in pollutant file\r\n            if pollutant == PollutantEnum.NMVOC:\r\n                fn = os.path.join(dir_inter, \\\r\n                    '{}_emis_lump_{}_{}_{}_hour.nc'.format(pollutant.name, \\\r\n                    sector.name, year, month))\r\n            else:\r\n                fn = os.path.join(dir_inter, \\\r\n                    '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.name, \\\r\n                    sector.name, year, month))\r\n            print('File_in: {}'.format(fn))\r\n            f = dataset.addfile(fn)\r\n\r\n            for var in f.variables:\r\n                if var.ndim == 3:\r\n                    if dict_spec.has_key(var.name):\r\n                        dict_spec[var.name].append(fn)\r\n                    else:\r\n                        dimvars.append(var)\r\n                        dict_spec[var.name] = [fn]\r\n    \r\n        #Create output merged netcdf data file\r\n        gattrs = dict(Conventions='CF-1.6', Tools='Created using MeteoInfo')\r\n        ncfile = dataset.addfile(outfn, 'c', largefile=True)\r\n        ncfile.nc_define(dims, gattrs, dimvars)\r\n        for sname, fns in dict_spec.iteritems():\r\n            spec_data = None\r\n            for fn in fns:\r\n                f = dataset.addfile(fn)\r\n                if spec_data is None:\r\n                    spec_data = f[sname][:]\r\n                else:\r\n                    spec_data = spec_data + f[sname][:]\r\n            ncfile.write(sname, spec_data)\r\n        f.close()\r\n        ncfile.close()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/run/run_meic_cams_htap/meic/merge_sector.py b/run/run_meic_cams_htap/meic/merge_sector.py
--- a/run/run_meic_cams_htap/meic/merge_sector.py	(revision 9144b019561ae8d01daeab7021b7003e7991d804)
+++ b/run/run_meic_cams_htap/meic/merge_sector.py	(date 1672762415956)
@@ -1,15 +1,13 @@
 """
 -----MEIC-----
 """
-import os
 import mipylib.numeric as np
+import os
 from mipylib import dataset
-from mipylib import geolib
 
-import emips
-from emips.utils import Sector, SectorEnum
-from emips.chem_spec import Pollutant, PollutantEnum
-from emips.spatial_alloc import GridDesc
+from emips.chem_spec import PollutantEnum
+from emips.utils import SectorEnum
+
 
 def run(year, month, dir_inter, model_grid):
     """
@@ -20,42 +18,42 @@
     :param dir_inter: (*string*) Data input and output path.
     :param model_grid: (*GridDesc*) Model data grid describe.
     """
-    #Set sectors and pollutants
+    # Set sectors and pollutants
     sectors = [SectorEnum.INDUSTRY, SectorEnum.AGRICULTURE, SectorEnum.ENERGY,
-        SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]
+               SectorEnum.RESIDENTIAL, SectorEnum.TRANSPORT]
 
-    pollutants = [PollutantEnum.BC, PollutantEnum.CO, PollutantEnum.NH3, \
-        PollutantEnum.NOx, PollutantEnum.OC, PollutantEnum.PM2_5, \
-        PollutantEnum.SO2, PollutantEnum.PM10, PollutantEnum.NMVOC]
+    pollutants = [PollutantEnum.BC, PollutantEnum.CO, PollutantEnum.NH3,
+                  PollutantEnum.NOx, PollutantEnum.OC, PollutantEnum.PM2_5,
+                  PollutantEnum.SO2, PollutantEnum.PM10, PollutantEnum.NMVOC]
 
-    #Set dimensions
+    # Set dimensions
     tdim = np.dimension(np.arange(24), 'hour')
     ydim = np.dimension(model_grid.y_coord, 'lat', 'Y')
     xdim = np.dimension(model_grid.x_coord, 'lon', 'X')
     dims = [tdim, ydim, xdim]
-    
-    #Sector loop
+
+    # Sector loop
     for sector in sectors:
         print('-----{}-----'.format(sector.name))
-    
-        #Set output sector emission file name
-        outfn = os.path.join(dir_inter, \
-            'emis_{}_{}_{}_hour.nc'.format(sector.name, year, month))
+
+        # Set output sector emission file name
+        outfn = os.path.join(dir_inter,
+                             'emis_{}_{}_{}_hour.nc'.format(sector.value.name, year, month))
         print('File_out: {}'.format(outfn))
-    
-        #Pollutant loop
+
+        # Pollutant loop
         dimvars = []
         dict_spec = {}
         for pollutant in pollutants:
-            #Read data in pollutant file
+            # Read data in pollutant file
             if pollutant == PollutantEnum.NMVOC:
-                fn = os.path.join(dir_inter, \
-                    '{}_emis_lump_{}_{}_{}_hour.nc'.format(pollutant.name, \
-                    sector.name, year, month))
+                fn = os.path.join(dir_inter,
+                                  '{}_emis_lump_{}_{}_{}_hour.nc'.format(pollutant.value.name,
+                                                                         sector.value.name, year, month))
             else:
-                fn = os.path.join(dir_inter, \
-                    '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.name, \
-                    sector.name, year, month))
+                fn = os.path.join(dir_inter,
+                                  '{}_emis_{}_{}_{}_hour.nc'.format(pollutant.value.name,
+                                                                    sector.value.name, year, month))
             print('File_in: {}'.format(fn))
             f = dataset.addfile(fn)
 
@@ -66,8 +64,8 @@
                     else:
                         dimvars.append(var)
                         dict_spec[var.name] = [fn]
-    
-        #Create output merged netcdf data file
+
+        # Create output merged netcdf data file
         gattrs = dict(Conventions='CF-1.6', Tools='Created using MeteoInfo')
         ncfile = dataset.addfile(outfn, 'c', largefile=True)
         ncfile.nc_define(dims, gattrs, dimvars)
